#!/usr/bin/python2.7
#
# Simple program to calculate intersection point
# made in python 2.7, you can launch it with:
# ./104intersection opt xp yp zp xv yv zv p
# (See subject for more details)
#

import sys
import math
import os
import random

if (len(sys.argv) != 9):
    exit (84)

def     sphere():
    Mx = int(sys.argv[2])
    My = int(sys.argv[3])
    Mz = int(sys.argv[4])
    Vx = int(sys.argv[5])
    Vy = int(sys.argv[6])
    Vz = int(sys.argv[7])
    r = int(sys.argv[8])
    
    print str("sphere of radius " + "%.0f" % r)
    print str("straight line going through the (" + "%.0f" % Mx + "," + "%.0f" % My
              + "," + "%.0f" % Mz + ") point and of direction vector ("
              + "%.0f" % Vx + "," + "%.0f" % Vy + "," + "%.0f" % Vz + ")")

    Vx_a = (Vx) ** 2
    Vx_b = (2 * Vx * Mx)
    Vx_c = (Mx) ** 2
                        
    Vy_a = (Vy) ** 2
    Vy_b = (2 * Vy * My)
    Vy_c = (My) ** 2

    Vz_a = (Vz) ** 2
    Vz_b = (2 * Vz * Mz)
    Vz_c = (Mz) ** 2

    a = Vx_a + Vy_a + Vz_a
    b = Vx_b + Vy_b + Vz_b
    c = Vx_c + Vy_c + Vz_c
    c = c - (r) ** 2
    delta = (b) ** 2 - (4 * a * c)

    if (delta > 0):
        x1 = (float(-b) - float(math.sqrt(delta)))/(2 * float(a))
        x2 = (float(-b) + float(math.sqrt(delta)))/(2 * float(a))
        x = Vx * x1 + Mx
        y = Vy * x1 + My
        z = Vz * x1 + Mz
        u = Vx * x2 + Mx
        v = Vy * x2 + My
        w = Vz * x2 + Mz

        print str("2 intersection points :")
        print str("(" + "%.3f" % u + ", " + "%.3f" % v + ", " + "%.3f" % w + ")")
        print str("(" + "%.3f" % x + ", " + "%.3f" % y + ", " + "%.3f" % z + ")")

    elif (delta == 0):
        t = (-float(b))/(2 * float(a))
        x = Vx * t + Mx
        y = Vy * t + My
        z = Vz * t + Mz

        print str("1 intersection point :")
        print str("(" + "%.3f" % x + ", " + "%.3f" % y + ", " + "%.3f" % z + ")")
    else:
        print str("No intersection point.")

###################################################################################

def     cylindre():
    Mx = int(sys.argv[2])
    My = int(sys.argv[3])
    Mz = int(sys.argv[4])
    Vx = int(sys.argv[5])
    Vy = int(sys.argv[6])
    Vz = int(sys.argv[7])
    r = int(sys.argv[8])
    
    print str("cylinder of radius " + "%.0f" % r)
    print str("straight line going through the (" + "%.0f" % Mx + "," + "%.0f" % My
              + "," + "%.0f" % Mz + ") point and of direction vector ("
              + "%.0f" % Vx + "," + "%.0f" % Vy + "," + "%.0f" % Vz + ")")

    Vx_a = (Vx) ** 2
    Vx_b = (2 * Vx * Mx)
    Vx_c = (Mx) ** 2

    Vy_a = (Vy) ** 2
    Vy_b = (2 * Vy * My)
    Vy_c = (My) ** 2

    a = Vx_a + Vy_a
    b = Vx_b + Vy_b
    c = Vx_c + Vy_c
    c = c - (r) ** 2
    delta = (b) ** 2 - (4 * a * c)

    if (delta > 0):
        x1 = float(-b - math.sqrt(delta))/(2 * a)
        x2 = float(-b + math.sqrt(delta))/(2 * a)
        x = Vx * x1 + Mx
        y = Vy * x1 + My
        z = Vz * x1 + Mz
        u = Vx * x2 + Mx
        v = Vy * x2 + My
        w = Vz * x2 + Mz
        
        print str("2 intersection points :")
        print str("(" + "%.3f" % u + ", " + "%.3f" % v + ", " + "%.3f" % w + ")")
        print str("(" + "%.3f" % x + ", " + "%.3f" % y + ", " + "%.3f" % z + ")")

    elif (delta == 0):
        if ((2 * float(a)) != 0):
            t = (-float(b))/(2 * float(a))
            x = Vx * t + Mx
            y = Vy * t + My
            z = Vz * t + Mz
            
            print str("1 intersection point :")
            print str("(" + "%.3f" % x + ", " + "%.3f" % y + ", " + "%.3f" % z + ")")
        else:
            print str("There is an infinite number of intersection points.")
    else:
        print str("No intersection point.")
        
def     cone():
    Mx = int(sys.argv[2])
    My = int(sys.argv[3])
    Mz = int(sys.argv[4])
    Vx = int(sys.argv[5])
    Vy = int(sys.argv[6])
    Vz = int(sys.argv[7])
    angle = int(sys.argv[8])

    print str("cone of " + "%.0f" % angle + " degree angle")
    print str("straight line going through the (" + "%.0f" % Mx + "," + "%.0f" % My
              + "," + "%.0f" % Mz + ") point and of direction vector ("
              + "%.0f" % Vx + "," + "%.0f" % Vy + "," + "%.0f" % Vz + ")")

    Vx_a = (Vx) ** 2
    Vx_b = (2 * Vx * Mx)
    Vx_c = (Mx) ** 2

    Vy_a = (Vy) ** 2
    Vy_b = (2 * Vy * My)
    Vy_c = (My) ** 2

    Vz_a = (Vz) ** 2
    Vz_b = (2 * Vz * Mz)
    Vz_c = (Mz) ** 2

    a = Vx_a + Vy_a - (Vz_a * math.tan(math.radians(angle)) ** 2)
    b = Vx_b + Vy_b - (Vz_b * math.tan(math.radians(angle)) ** 2)
    c = Vx_c + Vy_c - (Vz_c * math.tan(math.radians(angle)) ** 2)
    delta = (b) ** 2 - (4 * a * c)
    
    if (delta > 0):
        x1 = (-b - math.sqrt(delta))/(2 * a)
        x2 = (-b + math.sqrt(delta))/(2 * a)
        x = Vx * x1 + Mx
        y = Vy * x1 + My
        z = Vz * x1 + Mz
        u = Vx * x2 + Mx
        v = Vy * x2 + My
        w = Vz * x2 + Mz
        
        print str("2 intersection points :")
        print str("(" + "%.3f" % u + ", " + "%.3f" % v + ", " + "%.3f" % w + ")")
        print str("(" + "%.3f" % x + ", " + "%.3f" % y + ", " + "%.3f" % z + ")")
        
    elif (delta == 0):
        if (2 * float(a) != 0):
            t = (-float(b))/(2 * float(a))
            x = Vx * t + Mx
            y = Vy * t + My
            z = Vz * t + Mz
        
            print str("1 intersection point :")
            print str("(" + "%.3f" % x + ", " + "%.3f" % y + ", " + "%.3f" % z + ")")
        else:
            print str("There is an infinite number of intersection points.")
    else:
        print str("No intersection point.")

def     true_int(str_av):
    if (str_av[0] == '-'):
        i = 1
    else:
        i = 0
    while (i < len(str_av)):
        if (str_av[i] < '0' or str_av[i] > '9'):
            exit(84)
        i = i + 1;

i = 1
while (i < 9):
    true_int(sys.argv[i])
    i = i + 1

if (int(sys.argv[8]) <= 0):
    exit(84)
if (sys.argv[1] == '1'):
    sphere()
elif (sys.argv[1] == '2'):
    cylindre()
elif (sys.argv[1] == '3'):
    cone()
else:
    exit(84)
